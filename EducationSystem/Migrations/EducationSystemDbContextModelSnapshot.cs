// <auto-generated />
using System;
using EducationSystem.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EducationSystem.Migrations
{
    [DbContext(typeof(EducationSystemDbContext))]
    partial class EducationSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasComment("Статус доступа к курсу");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название курса");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.ToTable("Course", "Education");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Dictionaries.ApplicationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Alias")
                        .HasComment("Описание");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Имя (название) настройки");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value")
                        .HasComment("Значение настройки");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LastLoginTime")
                        .HasComment("Последние время входа в систему");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserAgent")
                        .HasComment("Устройство входа");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId")
                        .HasComment("Id пользователя");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Device", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("DeviceId")
                        .HasComment("Id устройства с которого был выполнен вход");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ExpireTime")
                        .HasComment("Время истечения рефреш токена");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Token")
                        .HasComment("Рефреш токен");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("RefreshToken", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Birthday")
                        .HasComment("Дата рождения пользователя");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName")
                        .HasComment("Имя пользователя");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName")
                        .HasComment("Фамилия пользователя");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Patronymic")
                        .HasComment("Отчесвто пользователя");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId")
                        .HasComment("Уникальный идентификатор пользователя");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserInfo", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.VerificationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Data")
                        .HasComment("Id устройства");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Token")
                        .HasComment("Токен");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.ToTable("VerificationToken", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.LaboratoryWork.LaboratoryWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseId")
                        .HasComment("Уникальный идентификатор курса");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasComment("Статус доступа к курсу");

                    b.Property<string>("MaterialUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MaterialUrl")
                        .HasComment("Ссылка на материал лабораторной работы");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название лабораторной работы");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("LaboratoryWork", "Material");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.LaboratoryWork.UserLaboratoryWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<int>("LaboratoryWorkId")
                        .HasColumnType("integer")
                        .HasColumnName("LaboratoryWorkId")
                        .HasComment("Уникальный идентификатор леции");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId")
                        .HasComment("Уникальный идентификатор пользователя");

                    b.Property<float?>("Value")
                        .HasColumnType("real")
                        .HasColumnName("Value")
                        .HasComment("todo");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLaboratoryWork", "Material");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Lecture.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseId")
                        .HasComment("Уникальный идентификатор курса");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasComment("Статус доступа к курсу");

                    b.Property<string>("MaterialUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MaterialUrl")
                        .HasComment("Ссылка на материал лекции");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название лекции");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lecture", "Material");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Lecture.UserLecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRead")
                        .HasComment("Статус прохождения лекции");

                    b.Property<int>("LectureId")
                        .HasColumnType("integer")
                        .HasColumnName("LectureId")
                        .HasComment("Уникальный идентификатор леции");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId")
                        .HasComment("Уникальный идентификатор пользователя");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLecture", "Material");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Test.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseId")
                        .HasComment("Уникальный идентификатор курса");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание теста");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasComment("Статус доступа к тесту");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название теста");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Test", "Material");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Test.TestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("IsCorrect")
                        .HasComment("Флаг. является ли ответ правильным");

                    b.Property<string>("QuestionAnswer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("QuestionAnswer")
                        .HasComment("Описание ответа");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("TestQuestionId")
                        .HasComment("Уникальный идентификатор вопроса теста");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestAnswer", "Material");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Test.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Image")
                        .HasComment("Изображение для вопроса");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("QuestionDescription")
                        .HasComment("Описание вопроса теста");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("TestId")
                        .HasComment("Уникальный идентификатор теста");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestion", "Material");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Test.UserTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("TestId")
                        .HasComment("Уникальный идентификатор теста");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId")
                        .HasComment("Уникальный идентификатор пользовтеля");

                    b.Property<float>("Value")
                        .HasColumnType("real")
                        .HasColumnName("Value")
                        .HasComment("Оценка по количеству правильных ответов");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTestResult", "Material");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор сущности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название предмета");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.HasKey("Id");

                    b.ToTable("Subject", "Education");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.RoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.ToTable("RoleClaim", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.UserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата создания сущности");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("Дата последнего обновления сущности");

                    b.ToTable("UserClaim", "Identity");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.Device", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.RefreshToken", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Identity.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.UserInfo", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.UserRole", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationSystem.Entities.DbModels.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.LaboratoryWork.LaboratoryWork", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.LaboratoryWork.UserLaboratoryWork", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Material.LaboratoryWork.LaboratoryWork", "LaboratoryWork")
                        .WithMany()
                        .HasForeignKey("LaboratoryWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationSystem.Entities.DbModels.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaboratoryWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Lecture.Lecture", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Lecture.UserLecture", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Material.Lecture.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationSystem.Entities.DbModels.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Test.Test", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Test.TestAnswer", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Material.Test.TestQuestion", "TestQuestion")
                        .WithMany()
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Test.TestQuestion", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Material.Test.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Material.Test.UserTestResult", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Material.Test.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationSystem.Entities.DbModels.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EducationSystem.Entities.DbModels.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.RoleClaim", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", null)
                        .WithOne()
                        .HasForeignKey("EducationSystem.Entities.DbModels.Identity.RoleClaim", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationSystem.Entities.DbModels.Identity.UserClaim", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", null)
                        .WithOne()
                        .HasForeignKey("EducationSystem.Entities.DbModels.Identity.UserClaim", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
